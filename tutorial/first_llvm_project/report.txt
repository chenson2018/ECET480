The following output is given:

	llvm@llvm:~/ECET480/tutorial/first_llvm_project$ ./hello sum.linked.bc 
	Function name - main
	Instructions - 
	  %1 = alloca i32, align 4
	  %2 = alloca i32, align 4
	  store i32 0, i32* %1, align 4
	  %3 = call i32 @sum(i32 3, i32 4)
	  store i32 %3, i32* %2, align 4
	  %4 = load i32, i32* %2, align 4
	  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i32 %4)
	  ret i32 0
	
	Function name - sum
	Instructions - 
	  %3 = alloca i32, align 4
	  %4 = alloca i32, align 4
	  store i32 %0, i32* %3, align 4
	  store i32 %1, i32* %4, align 4
	  %5 = load i32, i32* %3, align 4
	  %6 = load i32, i32* %4, align 4
	  %7 = add nsw i32 %5, %6
	  ret i32 %7

Note the small difference in the call to printf compared to the expected output
given in the assignment. This version also prints the input parameters:

	llvm@llvm:~/ECET480/tutorial/first_llvm_project$ clang sum.linked.bc -o sum
	llvm@llvm:~/ECET480/tutorial/first_llvm_project$ ./sum 
	3 + 4 = 7

Otherwise, the output is as expected.
